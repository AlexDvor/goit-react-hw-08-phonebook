{"version":3,"sources":["components/Container/Container.styles.jsx","components/Container/Container.js","components/Form/Form.styled.jsx","components/Button/Button.styled.jsx","components/Button/Button.js","redux/Contact/contacts-actions.js","services/fetchContacts.js","redux/Contact/contacts-operations.js","redux/Contact/contacts-selectors.js","components/Form/Form.js","components/Contact/ContactList.styled.jsx","components/Contact/ContactList.js","components/Contact/Contact.js","components/Filter/Filter.js","App.js","redux/Contact/contacts-reducer.js","redux/store.js","index.js"],"names":["Wrapper","styled","div","Container","children","FormItem","form","Input","input","Button","button","ButtonItem","text","type","filterByName","createAction","getContactsRequest","getContactsSuccess","getContactsError","postContactsRequest","postContactsSuccess","postContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","updatedListUsers","BASE_URL","fetchContacts","a","axios","get","then","res","data","postContacts","name","number","method","url","deleteContacts","id","updatedUserList","dispatch","services","contacts","actions","getContactsSelector","state","items","visibleContactsSelector","createSelector","filter","userName","item","toLowerCase","includes","Form","useState","setName","setNumber","useSelector","selector","useDispatch","handleChange","target","value","checkUserName","userData","newData","some","toast","info","newUserData","onSubmit","e","preventDefault","onChange","pattern","title","required","placeholder","ContactList","dataUsers","useEffect","length","map","onClick","contactsOperations","Contact","Filter","autoComplete","connect","autoClose","itemReducer","createReducer","_","action","payload","filterReducer","contactReducer","combineReducers","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2a94200.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    padding:20px 20px; \r\n`","import { Wrapper } from \"./Container.styles\"\r\n\r\nexport const Container = ({children}) => {\r\n    return (\r\n        <Wrapper>{children}</Wrapper>\r\n    )\r\n}","import styled from \"@emotion/styled\";\r\n\r\nexport const FormItem = styled.form`\r\ndisplay:flex;\r\nflex-direction:column;\r\nwidth:250px\r\n`\r\nexport const Input = styled.input`\r\nmargin-bottom: 20px;\r\n\r\n`","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\nwidth:120px\r\n`","import { Button } from \"./Button.styled\";\r\n\r\nfunction ButtonItem({ text }) {\r\n  return <Button type=\"submit\">{text}</Button>;\r\n}\r\n\r\nexport default ButtonItem;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const filterByName = createAction('filter/handleFilterByName');\r\n\r\nexport const getContactsRequest = createAction('contacts/getContactsRequest');\r\nexport const getContactsSuccess = createAction('contacts/getContactsSuccess');\r\nexport const getContactsError = createAction('contacts/getContactsError');\r\n\r\nexport const postContactsRequest = createAction('contacts/postContactsRequest');\r\nexport const postContactsSuccess = createAction('contacts/postContactsSuccess');\r\nexport const postContactsError = createAction('contacts/postContactsError');\r\n\r\nexport const deleteContactsRequest = createAction('contacts/deleteContactsRequest');\r\nexport const deleteContactsSuccess = createAction('contacts/deleteContactsSuccess');\r\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\r\n\r\nexport const updatedListUsers = createAction('contacts/updatedListUsers');\r\n","import axios from 'axios';\r\nconst BASE_URL = 'http://localhost:3000';\r\n\r\nexport async function fetchContacts() {\r\n  return await axios.get(`${BASE_URL}/contacts`).then(res => res.data);\r\n}\r\n\r\nexport async function postContacts({ name, number }) {\r\n  return await axios({\r\n    method: 'post',\r\n    url: `${BASE_URL}/contacts`,\r\n    data: {\r\n      name,\r\n      number,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function deleteContacts(id) {\r\n  return await axios({\r\n    method: 'delete',\r\n    url: `${BASE_URL}/contacts/${id}`,\r\n  });\r\n}\r\n","import * as actions from './contacts-actions';\r\nimport * as services from '../../services/fetchContacts';\r\n\r\nasync function updatedUserList(dispatch) {\r\n  const contacts = await services.fetchContacts();\r\n  return dispatch(actions.updatedListUsers(contacts));\r\n}\r\n\r\nexport const getContacts = () => async dispatch => {\r\n  dispatch(actions.getContactsRequest());\r\n  try {\r\n    const contacts = await services.fetchContacts();\r\n    dispatch(actions.getContactsSuccess(contacts));\r\n  } catch (error) {\r\n    dispatch(actions.getContactsError());\r\n  }\r\n};\r\n\r\nexport const postContacts = newUserData => async dispatch => {\r\n  dispatch(actions.postContactsRequest());\r\n  try {\r\n    await services.postContacts(newUserData);\r\n    dispatch(actions.postContactsSuccess());\r\n    updatedUserList(dispatch);\r\n  } catch (error) {\r\n    dispatch(actions.postContactsError());\r\n  }\r\n};\r\n\r\nexport const deleteContacts = id => async dispatch => {\r\n  dispatch(actions.deleteContactsRequest());\r\n  try {\r\n    await services.deleteContacts(id);\r\n    dispatch(actions.deleteContactsSuccess());\r\n    updatedUserList(dispatch);\r\n  } catch (error) {\r\n    dispatch(actions.deleteContactsError());\r\n  }\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContactsSelector = state => state.contacts.items;\r\nconst filterSelector = state => state.contacts.filter;\r\n\r\n// const visibleContactsSelector = state => {\r\n//   const contacts = getContactsSelector(state);\r\n//   const userName = filterSelector(state);\r\n//   if (contacts) {\r\n//     return contacts.filter(item => item.name.toLowerCase().includes(userName.toLowerCase()));\r\n//   }\r\n// };\r\n\r\nconst visibleContactsSelector = createSelector(\r\n  [getContactsSelector, filterSelector],\r\n  (contacts, userName) => {\r\n    if (contacts) {\r\n      return contacts.filter(item => item.name.toLowerCase().includes(userName.toLowerCase()));\r\n    }\r\n  },\r\n);\r\n\r\nexport { getContactsSelector, filterSelector, visibleContactsSelector };\r\n","// import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FormItem, Input } from './Form.styled.jsx';\nimport ButtonItem from '../Button';\nimport * as operations from '../../redux/Contact/contacts-operations';\nimport * as selector from '../../redux/Contact/contacts-selectors';\nimport { toast } from 'react-toastify';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const state = useSelector(selector.getContactsSelector);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contactData = {\n      name,\n      number,\n    };\n    checkUserName(state, contactData);\n    setName('');\n    setNumber('');\n  };\n\n  const checkUserName = (userData, newData) => {\n    if (userData.some(item => item.name === newData.name)) {\n      return toast.info('This name is already in your list');\n    }\n\n    dispatch(operations.postContacts(newData));\n  };\n\n  return (\n    <>\n      <div>\n        <FormItem onSubmit={handleSubmit}>\n          <Input\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            placeholder=\"Name\"\n          />\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            placeholder=\"Phone number\"\n          />\n          <ButtonItem text=\"Add contact\" />\n        </FormItem>\n      </div>\n    </>\n  );\n}\n\nForm.propTypes = {\n  handleChange: PropTypes.func,\n  getData: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  resetForm: PropTypes.func,\n};\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\nmargin-left:20px\r\n`","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './ContactList.styled';\nimport * as contactsOperations from '../../redux/Contact/contacts-operations';\nimport { visibleContactsSelector } from '../../redux/Contact/contacts-selectors';\n\nexport default function ContactList() {\n  const dataUsers = useSelector(visibleContactsSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {dataUsers.length > 0 &&\n        dataUsers.map(({ name, id, number }) => (\n          <li key={id}>\n            {name} : {number}\n            <Button onClick={() => dispatch(contactsOperations.deleteContacts(id))}>Delete</Button>\n          </li>\n        ))}\n    </>\n  );\n}\n\nContactList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import ContactList from './ContactList';\n\nfunction Contact() {\n  return (\n    <>\n      <ul>\n        <ContactList></ContactList>\n      </ul>\n    </>\n  );\n}\n\nexport default Contact;\n","import PropTypes from 'prop-types';\nimport * as actions from '../../redux/Contact/contacts-actions';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport default function Filter() {\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <p>Find Contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={e => dispatch(actions.filterByName(e.target.value))}\n        autoComplete=\"off\"\n      ></input>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { Container } from './components/Container/Container';\r\nimport Form from './components/Form';\r\nimport Contact from './components/Contact';\r\nimport Filter from './components/Filter';\r\nimport { connect } from 'react-redux';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <h2>Phonebook</h2>\r\n      <Form />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <Contact />\r\n      <ToastContainer autoClose={3000} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default connect(null, null)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst itemReducer = createReducer([], {\r\n  [actions.getContactsSuccess]: (_, action) => [...action.payload],\r\n  [actions.updatedListUsers]: (_, action) => [...action.payload],\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.filterByName]: (state, action) => (state = action.payload),\r\n});\r\n\r\nconst contactReducer = combineReducers({\r\n  items: itemReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactReducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactReducer from './Contact/contacts-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport store from './redux/store';\n// import { store, persistor } from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}